$screens: (
    xs: 390px,
    sm: 600px,
    md: 768px,
    lg: 1024px,
    xl: 1280px,
    \2xl: 1536px,
);

$layoutProperties: (
    position,
    overflow,
    overflow-x,
    overflow-y,
    top,
    right,
    bottom,
    left,
    margin,
    margin-x,
    margin-y,
    margin-left,
    margin-right,
    margin-top,
    margin-bottom,
    padding,
    padding-x,
    padding-y,
    padding-left,
    padding-right,
    padding-top,
    padding-bottom,
    width,
    min-width,
    max-width,
    height,
    min-height,
    max-height
);

@mixin responsive-properties($additional-properties: ()) {
    @each $property in $additional-properties {
        --#{$property}: initial;
        --#{$property}-computed: var(/* Value defined by the component, e.g. --display */ --#{$property}, initial);
    }

    $previous-breakpoint: null;

    @each $breakpoint, $min-width in $screens {
        @media (min-width: $min-width) {
            & {
                @each $property in $additional-properties {
                    @if ($previous-breakpoint == null) {
                        --#{$breakpoint}-#{$property}-computed: var(
                            /* Value defined by the component, e.g. --xs-display */ --#{$breakpoint}-#{$property},
                            var(--#{$property}-computed)
                        );
                    } @else {
                        --#{$breakpoint}-#{$property}-computed: var(
                            --#{$breakpoint}-#{$property},
                            var(--#{$previous-breakpoint}-#{$property}-computed)
                        );
                    }
                }

                @if (index($additional-properties, 'position')) {
                    position: var(--#{$breakpoint}-position-computed);
                }

                @if (index($additional-properties, 'overflow')) {
                    overflow: var(--#{$breakpoint}-overflow-computed);
                }
                @if (index($additional-properties, 'overflow-x')) {
                    overflow-x: var(--#{$breakpoint}-overflow-x-computed);
                }
                @if (index($additional-properties, 'overflow-y')) {
                    overflow-y: var(--#{$breakpoint}-overflow-y-computed);
                }

                @if (index($additional-properties, 'top')) {
                    top: var(--#{$breakpoint}-top-computed);
                }
                @if (index($additional-properties, 'right')) {
                    right: var(--#{$breakpoint}-right-computed);
                }
                @if (index($additional-properties, 'bottom')) {
                    bottom: var(--#{$breakpoint}-bottom-computed);
                }
                @if (index($additional-properties, 'left')) {
                    left: var(--#{$breakpoint}-left-computed);
                }

                @if (index($additional-properties, 'margin')) {
                    margin: var(--#{$breakpoint}-margin-computed);
                }
                @if (index($additional-properties, 'margin-left')) {
                    margin-left: var(
                        --#{$breakpoint}-margin-left-computed,
                        var(--#{$breakpoint}-margin-x-computed, var(--#{$breakpoint}-margin-computed))
                    );
                }
                @if (index($additional-properties, 'margin-right')) {
                    margin-right: var(
                        --#{$breakpoint}-margin-right-computed,
                        var(--#{$breakpoint}-margin-x-computed, var(--#{$breakpoint}-margin-computed))
                    );
                }
                @if (index($additional-properties, 'margin-top')) {
                    margin-top: var(
                        --#{$breakpoint}-margin-top-computed,
                        var(--#{$breakpoint}-margin-y-computed, var(--#{$breakpoint}-margin-computed))
                    );
                }
                @if (index($additional-properties, 'margin-bottom')) {
                    margin-bottom: var(
                        --#{$breakpoint}-margin-bottom-computed,
                        var(--#{$breakpoint}-margin-y-computed, var(--#{$breakpoint}-margin-computed))
                    );
                }

                @if (index($additional-properties, 'padding')) {
                    padding: var(--#{$breakpoint}-padding-computed);
                }
                @if (index($additional-properties, 'padding-left')) {
                    padding-left: var(
                        --#{$breakpoint}-padding-left-computed,
                        var(--#{$breakpoint}-padding-x-computed, var(--#{$breakpoint}-padding-computed))
                    );
                }
                @if (index($additional-properties, 'padding-right')) {
                    padding-right: var(
                        --#{$breakpoint}-padding-right-computed,
                        var(--#{$breakpoint}-padding-x-computed, var(--#{$breakpoint}-padding-computed))
                    );
                }
                @if (index($additional-properties, 'padding-top')) {
                    padding-top: var(
                        --#{$breakpoint}-padding-top-computed,
                        var(--#{$breakpoint}-padding-y-computed, var(--#{$breakpoint}-padding-computed))
                    );
                }
                @if (index($additional-properties, 'padding-bottom')) {
                    padding-bottom: var(
                        --#{$breakpoint}-padding-bottom-computed,
                        var(--#{$breakpoint}-padding-y-computed, var(--#{$breakpoint}-padding-computed))
                    );
                }

                @if index($additional-properties, 'width') {
                    width: var(--#{$breakpoint}-width-computed);
                }
                @if index($additional-properties, 'min-width') {
                    min-width: var(--#{$breakpoint}-min-width-computed);
                }
                @if index($additional-properties, 'max-width') {
                    max-width: var(--#{$breakpoint}-max-width-computed);
                }

                @if index($additional-properties, 'height') {
                    height: var(--#{$breakpoint}-height-computed);
                }
                @if index($additional-properties, 'min-height') {
                    min-height: var(--#{$breakpoint}-min-height-computed);
                }
                @if index($additional-properties, 'max-height') {
                    max-height: var(--#{$breakpoint}-max-height-computed);
                }

                @if index($additional-properties, 'display') {
                    display: var(--#{$breakpoint}-display-computed);
                }
                @if index($additional-properties, 'flex-direction') {
                    flex-direction: var(--#{$breakpoint}-flex-direction-computed);
                }
                @if index($additional-properties, 'align-items') {
                    align-items: var(--#{$breakpoint}-align-items-computed);
                }
                @if index($additional-properties, 'justify-content') {
                    justify-content: var(--#{$breakpoint}-justify-content-computed);
                }
                @if index($additional-properties, 'flex-wrap') {
                    flex-wrap: var(--#{$breakpoint}-flex-wrap-computed);
                }
                @if index($additional-properties, 'gap') {
                    gap: var(--#{$breakpoint}-gap-computed);
                }
                @if index($additional-properties, 'gap-x') {
                    column-gap: var(--#{$breakpoint}-gap-x-computed, var(--#{$breakpoint}-gap-computed));
                }
                @if index($additional-properties, 'gap-y') {
                    row-gap: var(--#{$breakpoint}-gap-y-computed, var(--#{$breakpoint}-gap-computed));
                }
            }
        }

        $previous-breakpoint: $breakpoint;
    }
}

@mixin layout {
    @include responsive-properties($layoutProperties);
}
