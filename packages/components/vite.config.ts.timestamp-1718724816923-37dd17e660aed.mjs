// vite.config.ts
import react from "file:///Users/noah.waldner/Documents/frontify/fondue/node_modules/.pnpm/@vitejs+plugin-react@4.3.0_vite@5.2.12_@types+node@20.14.0_sass@1.77.5_terser@5.31.1_/node_modules/@vitejs/plugin-react/dist/index.mjs";
import dts from "file:///Users/noah.waldner/Documents/frontify/fondue/node_modules/.pnpm/vite-plugin-dts@3.9.1_@types+node@20.14.0_rollup@4.18.0_typescript@5.4.5_vite@5.2.12_@types+n_vcfu6hxlly55w32ilns2avirvm/node_modules/vite-plugin-dts/dist/index.mjs";
import tsConfigPaths from "file:///Users/noah.waldner/Documents/frontify/fondue/node_modules/.pnpm/vite-tsconfig-paths@4.3.2_typescript@5.4.5_vite@5.2.12_@types+node@20.14.0_sass@1.77.5_terser@5.31.1_/node_modules/vite-tsconfig-paths/dist/index.mjs";
import { configDefaults, defineConfig } from "file:///Users/noah.waldner/Documents/frontify/fondue/node_modules/.pnpm/vitest@1.6.0_@types+node@20.14.0_@vitest+ui@1.6.0_happy-dom@14.12.0_sass@1.77.5_terser@5.31.1/node_modules/vitest/dist/config.js";

// package.json
var peerDependencies = {
  "@frontify/fondue-icons": "workspace:^",
  "@frontify/fondue-tokens": "workspace:^",
  react: "^18",
  "react-dom": "^18"
};
var dependencies = {
  "@radix-ui/react-checkbox": "^1.0.4",
  "@radix-ui/react-dialog": "^1.0.5",
  "@radix-ui/react-dropdown-menu": "^2.0.6",
  "@radix-ui/react-label": "^2.0.2",
  "@radix-ui/react-popover": "^1.0.7",
  "@radix-ui/react-progress": "^1.0.3",
  "@radix-ui/react-separator": "^1.0.3",
  "@radix-ui/react-toggle-group": "^1.0.4",
  "@radix-ui/react-tooltip": "^1.0.7"
};

// vite.config.ts
var peerDependencies2 = Object.keys(peerDependencies);
var dependencies2 = Object.keys(dependencies);
var globals = {
  react: "React",
  "react-dom": "ReactDOM",
  "react-dom/client": "ReactDOMClient",
  "react/jsx-runtime": "react/jsx-runtime"
};
var vite_config_default = defineConfig({
  plugins: [
    react(),
    tsConfigPaths(),
    dts({ insertTypesEntry: true, rollupTypes: true, exclude: ["**/*.stories.tsx"] })
  ],
  build: {
    lib: {
      entry: "./src/index.ts",
      name: "FondueComponents",
      formats: ["es"]
    },
    sourcemap: true,
    minify: true,
    rollupOptions: {
      external: [...dependencies2, ...peerDependencies2, "react-dom/client", "react/jsx-runtime"],
      output: [
        {
          name: "FondueComponents",
          format: "es",
          preserveModules: true,
          preserveModulesRoot: "src",
          globals
        }
      ]
    }
  },
  test: {
    environment: "happy-dom",
    setupFiles: ["./src/setupTests.ts"],
    css: true,
    exclude: [...configDefaults.exclude, "scripts/templates/**/*.**"],
    coverage: {
      exclude: [
        ...configDefaults.exclude,
        ".storybook",
        "playwright",
        "scripts/templates",
        ".eslintrc.cjs",
        "**.config.{ts,cjs}",
        "**/**/*.{ct,spec,test,stories}.{ts,tsx}",
        "storybook-static"
      ],
      enabled: true,
      provider: "v8",
      reporter: ["text", "lcov", "html"]
    }
  }
});
export {
  vite_config_default as default,
  globals
};
//# sourceMappingURL=data:application/json;base64,
