// vite.config.ts
import react from "file:///Users/noah.waldner/Documents/frontify/fondue/node_modules/.pnpm/@vitejs+plugin-react@4.2.1_vite@5.1.3/node_modules/@vitejs/plugin-react/dist/index.mjs";
import { build } from "file:///Users/noah.waldner/Documents/frontify/fondue/node_modules/.pnpm/esbuild@0.20.0/node_modules/esbuild/lib/main.js";
import { defineConfig } from "file:///Users/noah.waldner/Documents/frontify/fondue/node_modules/.pnpm/vite@5.1.3_@types+node@20.11.19/node_modules/vite/dist/node/index.js";
import dts from "file:///Users/noah.waldner/Documents/frontify/fondue/node_modules/.pnpm/vite-plugin-dts@3.7.2_@types+node@20.11.19_rollup@4.12.0_typescript@5.3.3_vite@5.1.3/node_modules/vite-plugin-dts/dist/index.mjs";
import tsConfigPaths from "file:///Users/noah.waldner/Documents/frontify/fondue/node_modules/.pnpm/vite-tsconfig-paths@4.3.1_typescript@5.3.3_vite@5.1.3/node_modules/vite-tsconfig-paths/dist/index.mjs";

// package.json
var dependencies = {
  "@ctrl/tinycolor": "^4.0.3",
  "@dnd-kit/core": "^6.1.0",
  "@dnd-kit/modifiers": "^7.0.0",
  "@dnd-kit/sortable": "^8.0.0",
  "@dnd-kit/utilities": "^3.2.2",
  "@frontify/fondue-tokens": "3.3.0-next.8",
  "@popperjs/core": "^2.11.8",
  "@radix-ui/react-popover": "^1.0.7",
  "@radix-ui/react-toolbar": "^1.0.4",
  "@radix-ui/react-tooltip": "^1.0.7",
  "@react-aria/accordion": "3.0.0-alpha.17",
  "@react-aria/aria-modal-polyfill": "3.7.1",
  "@react-aria/breadcrumbs": "3.5.2",
  "@react-aria/button": "3.6.3",
  "@react-aria/checkbox": "3.7.0",
  "@react-aria/combobox": "3.4.3",
  "@react-aria/dialog": "3.4.1",
  "@react-aria/focus": "3.12.0",
  "@react-aria/interactions": "3.13.0",
  "@react-aria/link": "3.3.5",
  "@react-aria/listbox": "3.7.1",
  "@react-aria/menu": "3.7.0",
  "@react-aria/overlays": "3.12.0",
  "@react-aria/radio": "3.4.1",
  "@react-aria/select": "3.8.3",
  "@react-aria/selection": "3.12.0",
  "@react-aria/table": "3.6.0",
  "@react-aria/tooltip": "3.3.3",
  "@react-aria/utils": "3.14.1",
  "@react-aria/visually-hidden": "3.6.0",
  "@react-stately/checkbox": "3.3.2",
  "@react-stately/collections": "3.4.4",
  "@react-stately/combobox": "3.2.2",
  "@react-stately/list": "3.5.4",
  "@react-stately/menu": "3.4.4",
  "@react-stately/overlays": "3.4.2",
  "@react-stately/radio": "3.6.0",
  "@react-stately/select": "3.3.2",
  "@react-stately/table": "3.5.0",
  "@react-stately/toggle": "3.4.2",
  "@react-stately/tooltip": "3.2.2",
  "@react-stately/tree": "3.3.4",
  "@react-types/dialog": "3.4.5",
  "@react-types/shared": "3.16.0",
  "@tailwindcss/forms": "^0.5.7",
  "@udecode/plate-alignment": "30.5.3",
  "@udecode/plate-autoformat": "30.5.3",
  "@udecode/plate-basic-marks": "30.5.3",
  "@udecode/plate-break": "30.5.3",
  "@udecode/plate-code-block": "30.7.0",
  "@udecode/plate-combobox": "30.5.3",
  "@udecode/plate-core": "30.4.5",
  "@udecode/plate-emoji": "30.7.0",
  "@udecode/plate-floating": "30.5.3",
  "@udecode/plate-indent": "30.5.3",
  "@udecode/plate-link": "30.5.3",
  "@udecode/plate-list": "30.5.3",
  "@udecode/plate-mention": "30.5.3",
  "@udecode/plate-normalizers": "30.5.3",
  "@udecode/plate-paragraph": "30.5.3",
  "@udecode/plate-utils": "30.4.5",
  "@udecode/react-utils": "29.0.1",
  "@udecode/slate": "25.0.0",
  "@udecode/slate-react": "29.0.1",
  "@udecode/slate-utils": "25.0.0",
  "@udecode/utils": "24.3.0",
  "@udecode/zustood": "2.0.0",
  "@xstate/immer": "0.3.1",
  "@xstate/react": "1.6.3",
  "date-fns": "^3.3.1",
  "escape-html": "^1.0.3",
  "framer-motion": "^10.18.0",
  immer: "9.0.12",
  "is-hotkey": "^0.2.0",
  "react-colorful": "^5.6.1",
  "react-datepicker": "^4.25.0",
  "react-dnd": "^16.0.1",
  "react-dnd-html5-backend": "^16.0.1",
  "react-fast-compare": "^3.2.2",
  "react-is": "^18.2.0",
  "react-popper": "^2.3.0",
  "react-textarea-autosize": "^8.5.3",
  "remark-gfm": "^3.0.1",
  "remark-parse": "^10.0.2",
  slate: "^0.102.0",
  "slate-react": "^0.102.0",
  unified: "^10.1.2",
  "unist-util-visit": "^5.0.0",
  xstate: "4.28.1"
};
var peerDependencies = {
  react: "^18",
  "react-dom": "^18"
};

// vite.config.ts
var peerDependencies2 = Object.keys(peerDependencies);
var dependencies2 = Object.keys(dependencies);
var globals = {
  react: "React",
  "react-dom": "ReactDOM",
  "react-dom/client": "ReactDOMClient",
  "react/jsx-runtime": "react/jsx-runtime"
};
var bundleIconsInDevPlugin = () => {
  let command;
  return {
    name: "bundle-icons",
    config(_config, { command: _command }) {
      command = _command;
    },
    async load(id) {
      if (command === "serve" && id.endsWith("/Icon/Generated/index.ts")) {
        const { outputFiles } = await build({
          absWorkingDir: process.cwd(),
          entryPoints: [id],
          bundle: true,
          write: false,
          platform: "browser",
          jsx: "automatic",
          format: "esm",
          plugins: [
            {
              name: "externals",
              setup(build2) {
                build2.onResolve({ namespace: "file", filter: /.*/ }, (args) => {
                  if (args.kind === "entry-point") {
                    return null;
                  }
                  if (args.path.startsWith("./Icon")) {
                    return null;
                  }
                  return {
                    path: args.path,
                    external: true
                  };
                });
              }
            }
          ]
        });
        if (!outputFiles || outputFiles.length !== 1) {
          return null;
        }
        return outputFiles[0].text;
      }
      return null;
    }
  };
};
var vite_config_default = defineConfig({
  // needs to be defined here, such that it is not undefined in the tests.
  define: {
    "process.env.REACT_APP_SC_ATTR": JSON.stringify(process.env.REACT_APP_SC_ATTR),
    "process.env.SC_ATTR": JSON.stringify(process.env.SC_ATTR)
  },
  plugins: [react(), tsConfigPaths(), dts({ insertTypesEntry: true, rollupTypes: true }), bundleIconsInDevPlugin()],
  build: {
    lib: {
      entry: "./src/index.ts",
      fileName: (format) => `[name].${format}.js`
    },
    sourcemap: true,
    minify: true,
    rollupOptions: {
      external: [...dependencies2, ...peerDependencies2, "react-dom/client", "react/jsx-runtime"],
      output: [
        {
          name: "Fondue",
          format: "es",
          preserveModules: true,
          preserveModulesRoot: "src",
          globals
        },
        {
          name: "Fondue",
          format: "umd",
          globals
        },
        {
          name: "Fondue",
          format: "cjs",
          globals
        }
      ]
    }
  }
});
export {
  bundleIconsInDevPlugin,
  vite_config_default as default,
  globals
};
//# sourceMappingURL=data:application/json;base64,
