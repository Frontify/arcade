// vite.config.ts
import react from "file:///Users/noah.waldner/Documents/frontify/fondue/node_modules/.pnpm/@vitejs+plugin-react@4.2.1_vite@5.2.7/node_modules/@vitejs/plugin-react/dist/index.mjs";
import { build } from "file:///Users/noah.waldner/Documents/frontify/fondue/node_modules/.pnpm/esbuild@0.20.2/node_modules/esbuild/lib/main.js";
import { defineConfig } from "file:///Users/noah.waldner/Documents/frontify/fondue/node_modules/.pnpm/vite@5.2.7_@types+node@20.12.3/node_modules/vite/dist/node/index.js";
import dts from "file:///Users/noah.waldner/Documents/frontify/fondue/node_modules/.pnpm/vite-plugin-dts@3.8.1_@types+node@20.12.3_rollup@4.14.0_typescript@5.4.3_vite@5.2.7/node_modules/vite-plugin-dts/dist/index.mjs";
import tsConfigPaths from "file:///Users/noah.waldner/Documents/frontify/fondue/node_modules/.pnpm/vite-tsconfig-paths@4.3.2_typescript@5.4.3_vite@5.2.7/node_modules/vite-tsconfig-paths/dist/index.mjs";

// package.json
var peerDependencies = {
  react: "^18",
  "react-dom": "^18"
};
var dependencies = {
  "@ctrl/tinycolor": "^4.0.3",
  "@dnd-kit/core": "^6.1.0",
  "@dnd-kit/modifiers": "^7.0.0",
  "@dnd-kit/sortable": "^8.0.0",
  "@dnd-kit/utilities": "^3.2.2",
  "@frontify/fondue-tokens": "3.3.0-next.8",
  "@popperjs/core": "^2.11.8",
  "@radix-ui/react-popover": "^1.0.7",
  "@radix-ui/react-toolbar": "^1.0.4",
  "@radix-ui/react-tooltip": "^1.0.7",
  "@react-aria/accordion": "3.0.0-alpha.17",
  "@react-aria/aria-modal-polyfill": "3.7.8",
  "@react-aria/breadcrumbs": "3.5.2",
  "@react-aria/button": "3.9.3",
  "@react-aria/checkbox": "3.7.0",
  "@react-aria/combobox": "3.4.3",
  "@react-aria/dialog": "3.4.1",
  "@react-aria/focus": "3.12.0",
  "@react-aria/interactions": "3.13.0",
  "@react-aria/link": "3.3.5",
  "@react-aria/listbox": "3.7.1",
  "@react-aria/menu": "3.7.0",
  "@react-aria/overlays": "3.12.0",
  "@react-aria/radio": "3.4.1",
  "@react-aria/select": "3.8.3",
  "@react-aria/selection": "3.12.0",
  "@react-aria/table": "3.6.0",
  "@react-aria/tooltip": "3.3.3",
  "@react-aria/utils": "3.14.1",
  "@react-aria/visually-hidden": "3.6.0",
  "@react-stately/checkbox": "3.3.2",
  "@react-stately/collections": "3.4.4",
  "@react-stately/combobox": "3.2.2",
  "@react-stately/list": "3.5.4",
  "@react-stately/menu": "3.4.4",
  "@react-stately/overlays": "3.4.2",
  "@react-stately/radio": "3.6.0",
  "@react-stately/select": "3.3.2",
  "@react-stately/table": "3.5.0",
  "@react-stately/toggle": "3.4.2",
  "@react-stately/tooltip": "3.2.2",
  "@react-stately/tree": "3.3.4",
  "@react-types/dialog": "3.4.5",
  "@react-types/shared": "3.16.0",
  "@tailwindcss/forms": "^0.5.7",
  "@udecode/plate-alignment": "30.5.3",
  "@udecode/plate-autoformat": "30.5.3",
  "@udecode/plate-basic-marks": "30.5.3",
  "@udecode/plate-break": "30.5.3",
  "@udecode/plate-code-block": "30.7.0",
  "@udecode/plate-combobox": "30.5.3",
  "@udecode/plate-core": "30.4.5",
  "@udecode/plate-emoji": "30.7.0",
  "@udecode/plate-floating": "30.5.3",
  "@udecode/plate-indent": "30.5.3",
  "@udecode/plate-link": "30.5.3",
  "@udecode/plate-list": "30.5.3",
  "@udecode/plate-mention": "30.5.3",
  "@udecode/plate-normalizers": "30.5.3",
  "@udecode/plate-paragraph": "30.5.3",
  "@udecode/plate-utils": "30.4.5",
  "@udecode/react-utils": "29.0.1",
  "@udecode/slate": "25.0.0",
  "@udecode/slate-react": "29.0.1",
  "@udecode/slate-utils": "25.0.0",
  "@udecode/utils": "24.3.0",
  "@udecode/zustood": "2.0.0",
  "@xstate/immer": "0.3.3",
  "@xstate/react": "1.6.3",
  "date-fns": "^3.6.0",
  "escape-html": "^1.0.3",
  "framer-motion": "^10.18.0",
  immer: "9.0.21",
  "is-hotkey": "^0.2.0",
  "react-colorful": "^5.6.1",
  "react-datepicker": "^4.25.0",
  "react-dnd": "^16.0.1",
  "react-dnd-html5-backend": "^16.0.1",
  "react-fast-compare": "^3.2.2",
  "react-is": "^18.2.0",
  "react-popper": "^2.3.0",
  "react-textarea-autosize": "^8.5.3",
  "remark-gfm": "^3.0.1",
  "remark-parse": "^10.0.2",
  slate: "^0.102.0",
  "slate-react": "^0.102.0",
  unified: "^10.1.2",
  "unist-util-visit": "^5.0.0",
  xstate: "4.38.3"
};

// vite.config.ts
var peerDependencies2 = Object.keys(peerDependencies);
var dependencies2 = Object.keys(dependencies);
var globals = {
  react: "React",
  "react-dom": "ReactDOM",
  "react-dom/client": "ReactDOMClient",
  "react/jsx-runtime": "react/jsx-runtime"
};
var bundleIconsInDevPlugin = () => {
  let command;
  return {
    name: "bundle-icons",
    config(_config, { command: _command }) {
      command = _command;
    },
    async load(id) {
      if (command === "serve" && id.endsWith("/Icon/Generated/index.ts")) {
        const { outputFiles } = await build({
          absWorkingDir: process.cwd(),
          entryPoints: [id],
          bundle: true,
          write: false,
          platform: "browser",
          jsx: "automatic",
          format: "esm",
          plugins: [
            {
              name: "externals",
              setup(build2) {
                build2.onResolve({ namespace: "file", filter: /.*/ }, (args) => {
                  if (args.kind === "entry-point") {
                    return null;
                  }
                  if (args.path.startsWith("./Icon")) {
                    return null;
                  }
                  return {
                    path: args.path,
                    external: true
                  };
                });
              }
            }
          ]
        });
        if (!outputFiles || outputFiles.length !== 1) {
          return null;
        }
        return outputFiles[0].text;
      }
      return null;
    }
  };
};
var vite_config_default = defineConfig({
  // needs to be defined here, such that it is not undefined in the tests.
  define: {
    "process.env.REACT_APP_SC_ATTR": JSON.stringify(process.env.REACT_APP_SC_ATTR),
    "process.env.SC_ATTR": JSON.stringify(process.env.SC_ATTR)
  },
  plugins: [react(), tsConfigPaths(), dts({ insertTypesEntry: true, rollupTypes: true }), bundleIconsInDevPlugin()],
  build: {
    lib: {
      entry: "./src/index.ts",
      fileName: (format) => `[name].${format}.js`
    },
    sourcemap: true,
    minify: true,
    rollupOptions: {
      external: [...dependencies2, ...peerDependencies2, "react-dom/client", "react/jsx-runtime"],
      output: [
        {
          name: "Fondue",
          format: "es",
          preserveModules: true,
          preserveModulesRoot: "src",
          globals
        },
        {
          name: "Fondue",
          format: "umd",
          globals
        },
        {
          name: "Fondue",
          format: "cjs",
          globals
        }
      ]
    }
  }
});
export {
  bundleIconsInDevPlugin,
  vite_config_default as default,
  globals
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcudHMiLCAicGFja2FnZS5qc29uIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZGlybmFtZSA9IFwiL1VzZXJzL25vYWgud2FsZG5lci9Eb2N1bWVudHMvZnJvbnRpZnkvZm9uZHVlL3BhY2thZ2VzL2ZvbmR1ZVwiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9maWxlbmFtZSA9IFwiL1VzZXJzL25vYWgud2FsZG5lci9Eb2N1bWVudHMvZnJvbnRpZnkvZm9uZHVlL3BhY2thZ2VzL2ZvbmR1ZS92aXRlLmNvbmZpZy50c1wiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9pbXBvcnRfbWV0YV91cmwgPSBcImZpbGU6Ly8vVXNlcnMvbm9haC53YWxkbmVyL0RvY3VtZW50cy9mcm9udGlmeS9mb25kdWUvcGFja2FnZXMvZm9uZHVlL3ZpdGUuY29uZmlnLnRzXCI7LyogKGMpIENvcHlyaWdodCBGcm9udGlmeSBMdGQuLCBhbGwgcmlnaHRzIHJlc2VydmVkLiAqL1xuXG5pbXBvcnQgcmVhY3QgZnJvbSAnQHZpdGVqcy9wbHVnaW4tcmVhY3QnO1xuaW1wb3J0IHsgYnVpbGQgfSBmcm9tICdlc2J1aWxkJztcbmltcG9ydCB7IHR5cGUgUGx1Z2luLCBkZWZpbmVDb25maWcgfSBmcm9tICd2aXRlJztcbmltcG9ydCBkdHMgZnJvbSAndml0ZS1wbHVnaW4tZHRzJztcbmltcG9ydCB0c0NvbmZpZ1BhdGhzIGZyb20gJ3ZpdGUtdHNjb25maWctcGF0aHMnO1xuXG5pbXBvcnQgeyBkZXBlbmRlbmNpZXMgYXMgZGVwZW5kZW5jaWVzTWFwLCBwZWVyRGVwZW5kZW5jaWVzIGFzIHBlZXJEZXBlbmRlbmNpZXNNYXAgfSBmcm9tICcuL3BhY2thZ2UuanNvbic7XG5cbmNvbnN0IHBlZXJEZXBlbmRlbmNpZXMgPSBPYmplY3Qua2V5cyhwZWVyRGVwZW5kZW5jaWVzTWFwKTtcbmNvbnN0IGRlcGVuZGVuY2llcyA9IE9iamVjdC5rZXlzKGRlcGVuZGVuY2llc01hcCk7XG5cbmV4cG9ydCBjb25zdCBnbG9iYWxzID0ge1xuICAgIHJlYWN0OiAnUmVhY3QnLFxuICAgICdyZWFjdC1kb20nOiAnUmVhY3RET00nLFxuICAgICdyZWFjdC1kb20vY2xpZW50JzogJ1JlYWN0RE9NQ2xpZW50JyxcbiAgICAncmVhY3QvanN4LXJ1bnRpbWUnOiAncmVhY3QvanN4LXJ1bnRpbWUnLFxufTtcblxuZXhwb3J0IGNvbnN0IGJ1bmRsZUljb25zSW5EZXZQbHVnaW4gPSAoKTogUGx1Z2luID0+IHtcbiAgICBsZXQgY29tbWFuZDogc3RyaW5nO1xuICAgIHJldHVybiB7XG4gICAgICAgIG5hbWU6ICdidW5kbGUtaWNvbnMnLFxuICAgICAgICBjb25maWcoX2NvbmZpZywgeyBjb21tYW5kOiBfY29tbWFuZCB9KSB7XG4gICAgICAgICAgICBjb21tYW5kID0gX2NvbW1hbmQ7XG4gICAgICAgIH0sXG4gICAgICAgIGFzeW5jIGxvYWQoaWQ6IHN0cmluZykge1xuICAgICAgICAgICAgLy8gT25seSBidW5kbGUgaWNvbnMgd2hlbiBydW5uaW5nIHRoZSBkZXYgc2VydmVyLlxuICAgICAgICAgICAgaWYgKGNvbW1hbmQgPT09ICdzZXJ2ZScgJiYgaWQuZW5kc1dpdGgoJy9JY29uL0dlbmVyYXRlZC9pbmRleC50cycpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBvdXRwdXRGaWxlcyB9ID0gYXdhaXQgYnVpbGQoe1xuICAgICAgICAgICAgICAgICAgICBhYnNXb3JraW5nRGlyOiBwcm9jZXNzLmN3ZCgpLFxuICAgICAgICAgICAgICAgICAgICBlbnRyeVBvaW50czogW2lkXSxcbiAgICAgICAgICAgICAgICAgICAgYnVuZGxlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICB3cml0ZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIHBsYXRmb3JtOiAnYnJvd3NlcicsXG4gICAgICAgICAgICAgICAgICAgIGpzeDogJ2F1dG9tYXRpYycsXG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdDogJ2VzbScsXG4gICAgICAgICAgICAgICAgICAgIHBsdWdpbnM6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnZXh0ZXJuYWxzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXR1cChidWlsZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidWlsZC5vblJlc29sdmUoeyBuYW1lc3BhY2U6ICdmaWxlJywgZmlsdGVyOiAvLiovIH0sIChhcmdzKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXJncy5raW5kID09PSAnZW50cnktcG9pbnQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIHRoZSBmaWxlIGlzIGluIG91ciBpY29ucywgdXNlIHN0YW5kYXJkIHJlc29sdXRpb24uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXJncy5wYXRoLnN0YXJ0c1dpdGgoJy4vSWNvbicpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIHZlbmRvcnMsIG1hcmsgYXMgZXh0ZXJuYWxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0aDogYXJncy5wYXRoLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4dGVybmFsOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoIW91dHB1dEZpbGVzIHx8IG91dHB1dEZpbGVzLmxlbmd0aCAhPT0gMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gb3V0cHV0RmlsZXNbMF0udGV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9LFxuICAgIH07XG59O1xuXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb25maWcoe1xuICAgIC8vIG5lZWRzIHRvIGJlIGRlZmluZWQgaGVyZSwgc3VjaCB0aGF0IGl0IGlzIG5vdCB1bmRlZmluZWQgaW4gdGhlIHRlc3RzLlxuICAgIGRlZmluZToge1xuICAgICAgICAncHJvY2Vzcy5lbnYuUkVBQ1RfQVBQX1NDX0FUVFInOiBKU09OLnN0cmluZ2lmeShwcm9jZXNzLmVudi5SRUFDVF9BUFBfU0NfQVRUUiksXG4gICAgICAgICdwcm9jZXNzLmVudi5TQ19BVFRSJzogSlNPTi5zdHJpbmdpZnkocHJvY2Vzcy5lbnYuU0NfQVRUUiksXG4gICAgfSxcbiAgICBwbHVnaW5zOiBbcmVhY3QoKSwgdHNDb25maWdQYXRocygpLCBkdHMoeyBpbnNlcnRUeXBlc0VudHJ5OiB0cnVlLCByb2xsdXBUeXBlczogdHJ1ZSB9KSwgYnVuZGxlSWNvbnNJbkRldlBsdWdpbigpXSxcbiAgICBidWlsZDoge1xuICAgICAgICBsaWI6IHtcbiAgICAgICAgICAgIGVudHJ5OiAnLi9zcmMvaW5kZXgudHMnLFxuICAgICAgICAgICAgZmlsZU5hbWU6IChmb3JtYXQ6IHN0cmluZykgPT4gYFtuYW1lXS4ke2Zvcm1hdH0uanNgLFxuICAgICAgICB9LFxuICAgICAgICBzb3VyY2VtYXA6IHRydWUsXG4gICAgICAgIG1pbmlmeTogdHJ1ZSxcbiAgICAgICAgcm9sbHVwT3B0aW9uczoge1xuICAgICAgICAgICAgZXh0ZXJuYWw6IFsuLi5kZXBlbmRlbmNpZXMsIC4uLnBlZXJEZXBlbmRlbmNpZXMsICdyZWFjdC1kb20vY2xpZW50JywgJ3JlYWN0L2pzeC1ydW50aW1lJ10sXG4gICAgICAgICAgICBvdXRwdXQ6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6ICdGb25kdWUnLFxuICAgICAgICAgICAgICAgICAgICBmb3JtYXQ6ICdlcycsXG4gICAgICAgICAgICAgICAgICAgIHByZXNlcnZlTW9kdWxlczogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgcHJlc2VydmVNb2R1bGVzUm9vdDogJ3NyYycsXG4gICAgICAgICAgICAgICAgICAgIGdsb2JhbHMsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6ICdGb25kdWUnLFxuICAgICAgICAgICAgICAgICAgICBmb3JtYXQ6ICd1bWQnLFxuICAgICAgICAgICAgICAgICAgICBnbG9iYWxzLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiAnRm9uZHVlJyxcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0OiAnY2pzJyxcbiAgICAgICAgICAgICAgICAgICAgZ2xvYmFscyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICB9LFxufSk7XG4iLCAie1xuICAgIFwibmFtZVwiOiBcIkBmcm9udGlmeS9mb25kdWVcIixcbiAgICBcInR5cGVcIjogXCJtb2R1bGVcIixcbiAgICBcInZlcnNpb25cIjogXCIxMi4wLjAtYmV0YS40MjRcIixcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiRGVzaWduIHN5c3RlbSBvZiBGcm9udGlmeVwiLFxuICAgIFwiYXV0aG9yXCI6IFwiRnJvbnRpZnkgRGV2ZWxvcGVycyA8ZGV2ZWxvcGVyc0Bmcm9udGlmeS5jb20+XCIsXG4gICAgXCJob21lcGFnZVwiOiBcImh0dHBzOi8vZ2l0aHViLmNvbS9Gcm9udGlmeS9mb25kdWVcIixcbiAgICBcInJlcG9zaXRvcnlcIjoge1xuICAgICAgICBcInR5cGVcIjogXCJnaXRcIixcbiAgICAgICAgXCJ1cmxcIjogXCJodHRwczovL2dpdGh1Yi5jb20vRnJvbnRpZnkvZm9uZHVlXCIsXG4gICAgICAgIFwiZGlyZWN0b3J5XCI6IFwicGFja2FnZXMvZm9uZHVlXCJcbiAgICB9LFxuICAgIFwiYnVnc1wiOiB7XG4gICAgICAgIFwidXJsXCI6IFwiaHR0cHM6Ly9naXRodWIuY29tL2Zyb250aWZ5L2ZvbmR1ZS9pc3N1ZXNcIlxuICAgIH0sXG4gICAgXCJrZXl3b3Jkc1wiOiBbXG4gICAgICAgIFwiZnJvbnRpZnlcIixcbiAgICAgICAgXCJyZWFjdFwiLFxuICAgICAgICBcImNvbXBvbmVudHNcIixcbiAgICAgICAgXCJkZXNpZ24gc3lzdGVtXCJcbiAgICBdLFxuICAgIFwic2lkZUVmZmVjdHNcIjogZmFsc2UsXG4gICAgXCJleHBvcnRzXCI6IHtcbiAgICAgICAgXCIuXCI6IHtcbiAgICAgICAgICAgIFwidHlwZXNcIjogXCIuL2Rpc3QvaW5kZXguZC50c1wiLFxuICAgICAgICAgICAgXCJyZXF1aXJlXCI6IFwiLi9kaXN0L2luZGV4LnVtZC5qc1wiLFxuICAgICAgICAgICAgXCJpbXBvcnRcIjogXCIuL2Rpc3QvaW5kZXguZXMuanNcIlxuICAgICAgICB9LFxuICAgICAgICBcIi4vdGFpbHdpbmRcIjogXCIuL3RhaWx3aW5kLmNvbmZpZy50c1wiLFxuICAgICAgICBcIi4vc3R5bGVcIjogXCIuL2Rpc3Qvc3R5bGUuY3NzXCIsXG4gICAgICAgIFwiLi9zdHlsZXNcIjogXCIuL2Rpc3Qvc3R5bGUuY3NzXCIsXG4gICAgICAgIFwiLi9leHRyYWN0ZWRUaGlyZFBhcnR5U3R5bGVzXCI6IFwiLi9kaXN0L2V4dHJhY3RlZFRoaXJkUGFydHlTdHlsZXMuY3NzXCIsXG4gICAgICAgIFwiLi9kaXN0LypcIjogXCIuL2Rpc3QvKlwiXG4gICAgfSxcbiAgICBcIm1haW5cIjogXCJkaXN0L2luZGV4LnVtZC5qc1wiLFxuICAgIFwibW9kdWxlXCI6IFwiZGlzdC9pbmRleC5lcy5qc1wiLFxuICAgIFwidW5wa2dcIjogXCJkaXN0L2luZGV4LnVtZC5qc1wiLFxuICAgIFwianNkZWxpdnJcIjogXCJkaXN0L2luZGV4LnVtZC5qc1wiLFxuICAgIFwidHlwZXNcIjogXCJkaXN0L2luZGV4LmQudHNcIixcbiAgICBcImZpbGVzXCI6IFtcbiAgICAgICAgXCJkaXN0XCIsXG4gICAgICAgIFwidGFpbHdpbmQuY29uZmlnLmpzXCJcbiAgICBdLFxuICAgIFwiZW5naW5lc1wiOiB7XG4gICAgICAgIFwibm9kZVwiOiBcIj49MThcIlxuICAgIH0sXG4gICAgXCJzY3JpcHRzXCI6IHtcbiAgICAgICAgXCJidWlsZFwiOiBcInBucG0gY2xlYW4gJiYgcG5wbSBnZW5lcmF0ZTppY29ucyAmJiBwbnBtIGdlbmVyYXRlOmNvbXBvbmVudHNFbnVtICYmIHBucG0gYnVpbGQ6bGlicmFyeSAmJiBwbnBtIGJ1aWxkOmV4dHJhY3RlZFRoaXJkUGFydHlTdHlsZXNcIixcbiAgICAgICAgXCJidWlsZDpleHRyYWN0ZWRUaGlyZFBhcnR5U3R5bGVzXCI6IFwiY29uY2F0IHNyYy9jb21wb25lbnRzLyoqLyouY3NzIHwgcG9zdGNzcyA+IGRpc3QvZXh0cmFjdGVkVGhpcmRQYXJ0eVN0eWxlcy5jc3NcIixcbiAgICAgICAgXCJidWlsZDpsaWJyYXJ5XCI6IFwidml0ZSBidWlsZFwiLFxuICAgICAgICBcImJ1aWxkOnN0b3J5Ym9va1wiOiBcInBucG0gZ2VuZXJhdGU6aWNvbnMgJiYgcG5wbSBnZW5lcmF0ZTpjb21wb25lbnRzRW51bSAmJiBzdG9yeWJvb2sgYnVpbGRcIixcbiAgICAgICAgXCJkZXZcIjogXCJjcm9zcy1lbnYgTk9ERV9FTlY9ZGV2ZWxvcG1lbnQgcG5wbSBkZXY6bGlicmFyeVwiLFxuICAgICAgICBcImRldjpsaWJyYXJ5XCI6IFwidml0ZSBidWlsZCAtLWVtcHR5T3V0RGlyIGZhbHNlIC0td2F0Y2hcIixcbiAgICAgICAgXCJjbGVhblwiOiBcInJpbXJhZiBkaXN0XCIsXG4gICAgICAgIFwiY29tcG9uZW50OmNyZWF0ZVwiOiBcInRzeCBzY3JpcHRzL2NyZWF0ZU5ld0NvbXBvbmVudC50c1wiLFxuICAgICAgICBcImdlbmVyYXRlOmljb25zXCI6IFwicG5wbSBnZW5lcmF0ZTpyZWFjdEljb25zICYmIHBucG0gZ2VuZXJhdGU6aWNvbnNFbnVtXCIsXG4gICAgICAgIFwiZ2VuZXJhdGU6aWNvbnNFbnVtXCI6IFwidHN4IC4vc2NyaXB0cy9nZW5lcmF0ZUljb25FbnVtLnRzXCIsXG4gICAgICAgIFwiZ2VuZXJhdGU6Y29tcG9uZW50c0VudW1cIjogXCJ0c3ggLi9zY3JpcHRzL2dlbmVyYXRlQ29tcG9uZW50RW51bS50c1wiLFxuICAgICAgICBcImdlbmVyYXRlOnJlYWN0SWNvbnNcIjogXCJ0c3ggLi9zY3JpcHRzL2dlbmVyYXRlUmVhY3RJY29ucy50c1wiLFxuICAgICAgICBcImxpbnRcIjogXCJlc2xpbnQgLlwiLFxuICAgICAgICBcImxpbnQ6Zml4XCI6IFwiZXNsaW50IC0tZml4IC5cIixcbiAgICAgICAgXCJ0ZXN0XCI6IFwiY3lwcmVzcyBydW4gLS1jb21wb25lbnRcIixcbiAgICAgICAgXCJ0ZXN0OmJyb3dzZXJcIjogXCJjeXByZXNzIG9wZW4gLS1jb21wb25lbnRcIixcbiAgICAgICAgXCJ0ZXN0OmZpbGVcIjogXCJjeXByZXNzIHJ1biAtLWNvbXBvbmVudCAtLXNwZWNcIixcbiAgICAgICAgXCJ0eXBlY2hlY2tcIjogXCJ0c2MgLS1ub0VtaXRcIixcbiAgICAgICAgXCJzdG9yeWJvb2tcIjogXCJzdG9yeWJvb2sgZGV2IC1wIDYwMDZcIixcbiAgICAgICAgXCJjaVwiOiBcInBucG0gaW5zdGFsbCAtLWZyb3plbi1sb2NrZmlsZVwiXG4gICAgfSxcbiAgICBcInBlZXJEZXBlbmRlbmNpZXNcIjoge1xuICAgICAgICBcInJlYWN0XCI6IFwiXjE4XCIsXG4gICAgICAgIFwicmVhY3QtZG9tXCI6IFwiXjE4XCJcbiAgICB9LFxuICAgIFwiZGVwZW5kZW5jaWVzXCI6IHtcbiAgICAgICAgXCJAY3RybC90aW55Y29sb3JcIjogXCJeNC4wLjNcIixcbiAgICAgICAgXCJAZG5kLWtpdC9jb3JlXCI6IFwiXjYuMS4wXCIsXG4gICAgICAgIFwiQGRuZC1raXQvbW9kaWZpZXJzXCI6IFwiXjcuMC4wXCIsXG4gICAgICAgIFwiQGRuZC1raXQvc29ydGFibGVcIjogXCJeOC4wLjBcIixcbiAgICAgICAgXCJAZG5kLWtpdC91dGlsaXRpZXNcIjogXCJeMy4yLjJcIixcbiAgICAgICAgXCJAZnJvbnRpZnkvZm9uZHVlLXRva2Vuc1wiOiBcIjMuMy4wLW5leHQuOFwiLFxuICAgICAgICBcIkBwb3BwZXJqcy9jb3JlXCI6IFwiXjIuMTEuOFwiLFxuICAgICAgICBcIkByYWRpeC11aS9yZWFjdC1wb3BvdmVyXCI6IFwiXjEuMC43XCIsXG4gICAgICAgIFwiQHJhZGl4LXVpL3JlYWN0LXRvb2xiYXJcIjogXCJeMS4wLjRcIixcbiAgICAgICAgXCJAcmFkaXgtdWkvcmVhY3QtdG9vbHRpcFwiOiBcIl4xLjAuN1wiLFxuICAgICAgICBcIkByZWFjdC1hcmlhL2FjY29yZGlvblwiOiBcIjMuMC4wLWFscGhhLjE3XCIsXG4gICAgICAgIFwiQHJlYWN0LWFyaWEvYXJpYS1tb2RhbC1wb2x5ZmlsbFwiOiBcIjMuNy44XCIsXG4gICAgICAgIFwiQHJlYWN0LWFyaWEvYnJlYWRjcnVtYnNcIjogXCIzLjUuMlwiLFxuICAgICAgICBcIkByZWFjdC1hcmlhL2J1dHRvblwiOiBcIjMuOS4zXCIsXG4gICAgICAgIFwiQHJlYWN0LWFyaWEvY2hlY2tib3hcIjogXCIzLjcuMFwiLFxuICAgICAgICBcIkByZWFjdC1hcmlhL2NvbWJvYm94XCI6IFwiMy40LjNcIixcbiAgICAgICAgXCJAcmVhY3QtYXJpYS9kaWFsb2dcIjogXCIzLjQuMVwiLFxuICAgICAgICBcIkByZWFjdC1hcmlhL2ZvY3VzXCI6IFwiMy4xMi4wXCIsXG4gICAgICAgIFwiQHJlYWN0LWFyaWEvaW50ZXJhY3Rpb25zXCI6IFwiMy4xMy4wXCIsXG4gICAgICAgIFwiQHJlYWN0LWFyaWEvbGlua1wiOiBcIjMuMy41XCIsXG4gICAgICAgIFwiQHJlYWN0LWFyaWEvbGlzdGJveFwiOiBcIjMuNy4xXCIsXG4gICAgICAgIFwiQHJlYWN0LWFyaWEvbWVudVwiOiBcIjMuNy4wXCIsXG4gICAgICAgIFwiQHJlYWN0LWFyaWEvb3ZlcmxheXNcIjogXCIzLjEyLjBcIixcbiAgICAgICAgXCJAcmVhY3QtYXJpYS9yYWRpb1wiOiBcIjMuNC4xXCIsXG4gICAgICAgIFwiQHJlYWN0LWFyaWEvc2VsZWN0XCI6IFwiMy44LjNcIixcbiAgICAgICAgXCJAcmVhY3QtYXJpYS9zZWxlY3Rpb25cIjogXCIzLjEyLjBcIixcbiAgICAgICAgXCJAcmVhY3QtYXJpYS90YWJsZVwiOiBcIjMuNi4wXCIsXG4gICAgICAgIFwiQHJlYWN0LWFyaWEvdG9vbHRpcFwiOiBcIjMuMy4zXCIsXG4gICAgICAgIFwiQHJlYWN0LWFyaWEvdXRpbHNcIjogXCIzLjE0LjFcIixcbiAgICAgICAgXCJAcmVhY3QtYXJpYS92aXN1YWxseS1oaWRkZW5cIjogXCIzLjYuMFwiLFxuICAgICAgICBcIkByZWFjdC1zdGF0ZWx5L2NoZWNrYm94XCI6IFwiMy4zLjJcIixcbiAgICAgICAgXCJAcmVhY3Qtc3RhdGVseS9jb2xsZWN0aW9uc1wiOiBcIjMuNC40XCIsXG4gICAgICAgIFwiQHJlYWN0LXN0YXRlbHkvY29tYm9ib3hcIjogXCIzLjIuMlwiLFxuICAgICAgICBcIkByZWFjdC1zdGF0ZWx5L2xpc3RcIjogXCIzLjUuNFwiLFxuICAgICAgICBcIkByZWFjdC1zdGF0ZWx5L21lbnVcIjogXCIzLjQuNFwiLFxuICAgICAgICBcIkByZWFjdC1zdGF0ZWx5L292ZXJsYXlzXCI6IFwiMy40LjJcIixcbiAgICAgICAgXCJAcmVhY3Qtc3RhdGVseS9yYWRpb1wiOiBcIjMuNi4wXCIsXG4gICAgICAgIFwiQHJlYWN0LXN0YXRlbHkvc2VsZWN0XCI6IFwiMy4zLjJcIixcbiAgICAgICAgXCJAcmVhY3Qtc3RhdGVseS90YWJsZVwiOiBcIjMuNS4wXCIsXG4gICAgICAgIFwiQHJlYWN0LXN0YXRlbHkvdG9nZ2xlXCI6IFwiMy40LjJcIixcbiAgICAgICAgXCJAcmVhY3Qtc3RhdGVseS90b29sdGlwXCI6IFwiMy4yLjJcIixcbiAgICAgICAgXCJAcmVhY3Qtc3RhdGVseS90cmVlXCI6IFwiMy4zLjRcIixcbiAgICAgICAgXCJAcmVhY3QtdHlwZXMvZGlhbG9nXCI6IFwiMy40LjVcIixcbiAgICAgICAgXCJAcmVhY3QtdHlwZXMvc2hhcmVkXCI6IFwiMy4xNi4wXCIsXG4gICAgICAgIFwiQHRhaWx3aW5kY3NzL2Zvcm1zXCI6IFwiXjAuNS43XCIsXG4gICAgICAgIFwiQHVkZWNvZGUvcGxhdGUtYWxpZ25tZW50XCI6IFwiMzAuNS4zXCIsXG4gICAgICAgIFwiQHVkZWNvZGUvcGxhdGUtYXV0b2Zvcm1hdFwiOiBcIjMwLjUuM1wiLFxuICAgICAgICBcIkB1ZGVjb2RlL3BsYXRlLWJhc2ljLW1hcmtzXCI6IFwiMzAuNS4zXCIsXG4gICAgICAgIFwiQHVkZWNvZGUvcGxhdGUtYnJlYWtcIjogXCIzMC41LjNcIixcbiAgICAgICAgXCJAdWRlY29kZS9wbGF0ZS1jb2RlLWJsb2NrXCI6IFwiMzAuNy4wXCIsXG4gICAgICAgIFwiQHVkZWNvZGUvcGxhdGUtY29tYm9ib3hcIjogXCIzMC41LjNcIixcbiAgICAgICAgXCJAdWRlY29kZS9wbGF0ZS1jb3JlXCI6IFwiMzAuNC41XCIsXG4gICAgICAgIFwiQHVkZWNvZGUvcGxhdGUtZW1vamlcIjogXCIzMC43LjBcIixcbiAgICAgICAgXCJAdWRlY29kZS9wbGF0ZS1mbG9hdGluZ1wiOiBcIjMwLjUuM1wiLFxuICAgICAgICBcIkB1ZGVjb2RlL3BsYXRlLWluZGVudFwiOiBcIjMwLjUuM1wiLFxuICAgICAgICBcIkB1ZGVjb2RlL3BsYXRlLWxpbmtcIjogXCIzMC41LjNcIixcbiAgICAgICAgXCJAdWRlY29kZS9wbGF0ZS1saXN0XCI6IFwiMzAuNS4zXCIsXG4gICAgICAgIFwiQHVkZWNvZGUvcGxhdGUtbWVudGlvblwiOiBcIjMwLjUuM1wiLFxuICAgICAgICBcIkB1ZGVjb2RlL3BsYXRlLW5vcm1hbGl6ZXJzXCI6IFwiMzAuNS4zXCIsXG4gICAgICAgIFwiQHVkZWNvZGUvcGxhdGUtcGFyYWdyYXBoXCI6IFwiMzAuNS4zXCIsXG4gICAgICAgIFwiQHVkZWNvZGUvcGxhdGUtdXRpbHNcIjogXCIzMC40LjVcIixcbiAgICAgICAgXCJAdWRlY29kZS9yZWFjdC11dGlsc1wiOiBcIjI5LjAuMVwiLFxuICAgICAgICBcIkB1ZGVjb2RlL3NsYXRlXCI6IFwiMjUuMC4wXCIsXG4gICAgICAgIFwiQHVkZWNvZGUvc2xhdGUtcmVhY3RcIjogXCIyOS4wLjFcIixcbiAgICAgICAgXCJAdWRlY29kZS9zbGF0ZS11dGlsc1wiOiBcIjI1LjAuMFwiLFxuICAgICAgICBcIkB1ZGVjb2RlL3V0aWxzXCI6IFwiMjQuMy4wXCIsXG4gICAgICAgIFwiQHVkZWNvZGUvenVzdG9vZFwiOiBcIjIuMC4wXCIsXG4gICAgICAgIFwiQHhzdGF0ZS9pbW1lclwiOiBcIjAuMy4zXCIsXG4gICAgICAgIFwiQHhzdGF0ZS9yZWFjdFwiOiBcIjEuNi4zXCIsXG4gICAgICAgIFwiZGF0ZS1mbnNcIjogXCJeMy42LjBcIixcbiAgICAgICAgXCJlc2NhcGUtaHRtbFwiOiBcIl4xLjAuM1wiLFxuICAgICAgICBcImZyYW1lci1tb3Rpb25cIjogXCJeMTAuMTguMFwiLFxuICAgICAgICBcImltbWVyXCI6IFwiOS4wLjIxXCIsXG4gICAgICAgIFwiaXMtaG90a2V5XCI6IFwiXjAuMi4wXCIsXG4gICAgICAgIFwicmVhY3QtY29sb3JmdWxcIjogXCJeNS42LjFcIixcbiAgICAgICAgXCJyZWFjdC1kYXRlcGlja2VyXCI6IFwiXjQuMjUuMFwiLFxuICAgICAgICBcInJlYWN0LWRuZFwiOiBcIl4xNi4wLjFcIixcbiAgICAgICAgXCJyZWFjdC1kbmQtaHRtbDUtYmFja2VuZFwiOiBcIl4xNi4wLjFcIixcbiAgICAgICAgXCJyZWFjdC1mYXN0LWNvbXBhcmVcIjogXCJeMy4yLjJcIixcbiAgICAgICAgXCJyZWFjdC1pc1wiOiBcIl4xOC4yLjBcIixcbiAgICAgICAgXCJyZWFjdC1wb3BwZXJcIjogXCJeMi4zLjBcIixcbiAgICAgICAgXCJyZWFjdC10ZXh0YXJlYS1hdXRvc2l6ZVwiOiBcIl44LjUuM1wiLFxuICAgICAgICBcInJlbWFyay1nZm1cIjogXCJeMy4wLjFcIixcbiAgICAgICAgXCJyZW1hcmstcGFyc2VcIjogXCJeMTAuMC4yXCIsXG4gICAgICAgIFwic2xhdGVcIjogXCJeMC4xMDIuMFwiLFxuICAgICAgICBcInNsYXRlLXJlYWN0XCI6IFwiXjAuMTAyLjBcIixcbiAgICAgICAgXCJ1bmlmaWVkXCI6IFwiXjEwLjEuMlwiLFxuICAgICAgICBcInVuaXN0LXV0aWwtdmlzaXRcIjogXCJeNS4wLjBcIixcbiAgICAgICAgXCJ4c3RhdGVcIjogXCI0LjM4LjNcIlxuICAgIH0sXG4gICAgXCJkZXZEZXBlbmRlbmNpZXNcIjoge1xuICAgICAgICBcIkBiYWJlbC9jb3JlXCI6IFwiXjcuMjQuM1wiLFxuICAgICAgICBcIkBjeXByZXNzL3ZpdGUtZGV2LXNlcnZlclwiOiBcIl41LjAuN1wiLFxuICAgICAgICBcIkBmcm9udGlmeS9lc2xpbnQtY29uZmlnLXJlYWN0XCI6IFwiXjAuMTcuNlwiLFxuICAgICAgICBcIkBmcm9udGlmeS9mb25kdWUtaWNvbnNcIjogXCJ3b3Jrc3BhY2U6XlwiLFxuICAgICAgICBcIkBzdG9yeWJvb2svYWRkb24tYTExeVwiOiBcIl43LjYuMTdcIixcbiAgICAgICAgXCJAc3Rvcnlib29rL2FkZG9uLWFjdGlvbnNcIjogXCJeNy42LjE3XCIsXG4gICAgICAgIFwiQHN0b3J5Ym9vay9hZGRvbi1lc3NlbnRpYWxzXCI6IFwiXjcuNi4xN1wiLFxuICAgICAgICBcIkBzdG9yeWJvb2svYWRkb24tbGlua3NcIjogXCJeNy42LjE3XCIsXG4gICAgICAgIFwiQHN0b3J5Ym9vay9tYW5hZ2VyLWFwaVwiOiBcIl43LjYuMTdcIixcbiAgICAgICAgXCJAc3Rvcnlib29rL3JlYWN0XCI6IFwiXjcuNi4xN1wiLFxuICAgICAgICBcIkBzdG9yeWJvb2svcmVhY3Qtdml0ZVwiOiBcIl43LjYuMTdcIixcbiAgICAgICAgXCJAc3Rvcnlib29rL3RoZW1pbmdcIjogXCJeNy42LjE3XCIsXG4gICAgICAgIFwiQHN2Z3IvYmFiZWwtcGx1Z2luLXRyYW5zZm9ybS1zdmctY29tcG9uZW50XCI6IFwiXjYuNS4xXCIsXG4gICAgICAgIFwiQHN2Z3IvY29yZVwiOiBcIl42LjUuMVwiLFxuICAgICAgICBcIkBzdmdyL3BsdWdpbi1qc3hcIjogXCJeNi41LjFcIixcbiAgICAgICAgXCJAc3Znci9wbHVnaW4tcHJldHRpZXJcIjogXCJeNi41LjFcIixcbiAgICAgICAgXCJAc3Znci9wbHVnaW4tc3Znb1wiOiBcIl42LjUuMVwiLFxuICAgICAgICBcIkB0eXBlcy9lc2NhcGUtaHRtbFwiOiBcIl4xLjAuNFwiLFxuICAgICAgICBcIkB0eXBlcy9pcy1ob3RrZXlcIjogXCJeMC4xLjEwXCIsXG4gICAgICAgIFwiQHR5cGVzL2xvZGFzaC1lc1wiOiBcIl40LjE3LjEyXCIsXG4gICAgICAgIFwiQHR5cGVzL25vZGVcIjogXCJeMjAuMTIuM1wiLFxuICAgICAgICBcIkB0eXBlcy9yZWFjdFwiOiBcIl4xOC4yLjc0XCIsXG4gICAgICAgIFwiQHR5cGVzL3JlYWN0LWRhdGVwaWNrZXJcIjogXCJeNC4xOS42XCIsXG4gICAgICAgIFwiQHR5cGVzL3JlYWN0LWRvbVwiOiBcIl4xOC4yLjIzXCIsXG4gICAgICAgIFwiQHR5cGVzL3JlYWN0LWlzXCI6IFwiXjE4LjIuNFwiLFxuICAgICAgICBcIkB2aXRlanMvcGx1Z2luLXJlYWN0XCI6IFwiXjQuMi4xXCIsXG4gICAgICAgIFwiYXV0b3ByZWZpeGVyXCI6IFwiXjEwLjQuMTlcIixcbiAgICAgICAgXCJjaGFsa1wiOiBcIl41LjMuMFwiLFxuICAgICAgICBcImNvbmNhdFwiOiBcIl4xLjAuM1wiLFxuICAgICAgICBcImNyb3NzLWVudlwiOiBcIl43LjAuM1wiLFxuICAgICAgICBcImN5cHJlc3NcIjogXCJeMTMuNy4xXCIsXG4gICAgICAgIFwiY3lwcmVzcy1yZWFsLWV2ZW50c1wiOiBcIl4xLjEyLjBcIixcbiAgICAgICAgXCJlc2J1aWxkXCI6IFwiXjAuMjAuMlwiLFxuICAgICAgICBcImVzbGludFwiOiBcIl44LjU3LjBcIixcbiAgICAgICAgXCJlc2xpbnQtcGx1Z2luLW5vdGljZVwiOiBcIl4wLjkuMTBcIixcbiAgICAgICAgXCJlc2xpbnQtcGx1Z2luLXN0b3J5Ym9va1wiOiBcIl4wLjguMFwiLFxuICAgICAgICBcImZhc3QtZ2xvYlwiOiBcIl4zLjMuMlwiLFxuICAgICAgICBcImdsb2JcIjogXCJeMTAuMy4xMlwiLFxuICAgICAgICBcImxvZGFzaC1lc1wiOiBcIl40LjE3LjIxXCIsXG4gICAgICAgIFwicG9zdGNzc1wiOiBcIl44LjQuMzhcIixcbiAgICAgICAgXCJwb3N0Y3NzLWNsaVwiOiBcIl4xMS4wLjBcIixcbiAgICAgICAgXCJwb3N0Y3NzLWltcG9ydFwiOiBcIl4xNi4xLjBcIixcbiAgICAgICAgXCJwb3N0Y3NzLW5lc3RlZFwiOiBcIl42LjAuMVwiLFxuICAgICAgICBcInByZXR0aWVyXCI6IFwiXjMuMi41XCIsXG4gICAgICAgIFwicmVhY3RcIjogXCJeMTguMi4wXCIsXG4gICAgICAgIFwicmVhY3QtZG9tXCI6IFwiXjE4LjIuMFwiLFxuICAgICAgICBcInJpbXJhZlwiOiBcIl41LjAuNVwiLFxuICAgICAgICBcInJvbGx1cFwiOiBcIl40LjE0LjBcIixcbiAgICAgICAgXCJzdG9yeWJvb2tcIjogXCJeNy42LjE3XCIsXG4gICAgICAgIFwic3Rvcnlib29rLWRhcmstbW9kZVwiOiBcIl4zXCIsXG4gICAgICAgIFwidGFpbHdpbmRjc3NcIjogXCJeMy40LjNcIixcbiAgICAgICAgXCJ0cy1ub2RlXCI6IFwiXjEwLjkuMlwiLFxuICAgICAgICBcInRzeFwiOiBcIl40LjcuMVwiLFxuICAgICAgICBcInR5cGVzY3JpcHRcIjogXCJeNS40LjNcIixcbiAgICAgICAgXCJ2aXRlXCI6IFwiXjUuMi43XCIsXG4gICAgICAgIFwidml0ZS1wbHVnaW4tZHRzXCI6IFwiXjMuOC4xXCIsXG4gICAgICAgIFwidml0ZS10c2NvbmZpZy1wYXRoc1wiOiBcIl40LjMuMlwiXG4gICAgfVxufVxuIl0sCiAgIm1hcHBpbmdzIjogIjtBQUVBLE9BQU8sV0FBVztBQUNsQixTQUFTLGFBQWE7QUFDdEIsU0FBc0Isb0JBQW9CO0FBQzFDLE9BQU8sU0FBUztBQUNoQixPQUFPLG1CQUFtQjs7O0FDOER0Qix1QkFBb0I7QUFBQSxFQUNoQixPQUFTO0FBQUEsRUFDVCxhQUFhO0FBQ2pCO0FBQ0EsbUJBQWdCO0FBQUEsRUFDWixtQkFBbUI7QUFBQSxFQUNuQixpQkFBaUI7QUFBQSxFQUNqQixzQkFBc0I7QUFBQSxFQUN0QixxQkFBcUI7QUFBQSxFQUNyQixzQkFBc0I7QUFBQSxFQUN0QiwyQkFBMkI7QUFBQSxFQUMzQixrQkFBa0I7QUFBQSxFQUNsQiwyQkFBMkI7QUFBQSxFQUMzQiwyQkFBMkI7QUFBQSxFQUMzQiwyQkFBMkI7QUFBQSxFQUMzQix5QkFBeUI7QUFBQSxFQUN6QixtQ0FBbUM7QUFBQSxFQUNuQywyQkFBMkI7QUFBQSxFQUMzQixzQkFBc0I7QUFBQSxFQUN0Qix3QkFBd0I7QUFBQSxFQUN4Qix3QkFBd0I7QUFBQSxFQUN4QixzQkFBc0I7QUFBQSxFQUN0QixxQkFBcUI7QUFBQSxFQUNyQiw0QkFBNEI7QUFBQSxFQUM1QixvQkFBb0I7QUFBQSxFQUNwQix1QkFBdUI7QUFBQSxFQUN2QixvQkFBb0I7QUFBQSxFQUNwQix3QkFBd0I7QUFBQSxFQUN4QixxQkFBcUI7QUFBQSxFQUNyQixzQkFBc0I7QUFBQSxFQUN0Qix5QkFBeUI7QUFBQSxFQUN6QixxQkFBcUI7QUFBQSxFQUNyQix1QkFBdUI7QUFBQSxFQUN2QixxQkFBcUI7QUFBQSxFQUNyQiwrQkFBK0I7QUFBQSxFQUMvQiwyQkFBMkI7QUFBQSxFQUMzQiw4QkFBOEI7QUFBQSxFQUM5QiwyQkFBMkI7QUFBQSxFQUMzQix1QkFBdUI7QUFBQSxFQUN2Qix1QkFBdUI7QUFBQSxFQUN2QiwyQkFBMkI7QUFBQSxFQUMzQix3QkFBd0I7QUFBQSxFQUN4Qix5QkFBeUI7QUFBQSxFQUN6Qix3QkFBd0I7QUFBQSxFQUN4Qix5QkFBeUI7QUFBQSxFQUN6QiwwQkFBMEI7QUFBQSxFQUMxQix1QkFBdUI7QUFBQSxFQUN2Qix1QkFBdUI7QUFBQSxFQUN2Qix1QkFBdUI7QUFBQSxFQUN2QixzQkFBc0I7QUFBQSxFQUN0Qiw0QkFBNEI7QUFBQSxFQUM1Qiw2QkFBNkI7QUFBQSxFQUM3Qiw4QkFBOEI7QUFBQSxFQUM5Qix3QkFBd0I7QUFBQSxFQUN4Qiw2QkFBNkI7QUFBQSxFQUM3QiwyQkFBMkI7QUFBQSxFQUMzQix1QkFBdUI7QUFBQSxFQUN2Qix3QkFBd0I7QUFBQSxFQUN4QiwyQkFBMkI7QUFBQSxFQUMzQix5QkFBeUI7QUFBQSxFQUN6Qix1QkFBdUI7QUFBQSxFQUN2Qix1QkFBdUI7QUFBQSxFQUN2QiwwQkFBMEI7QUFBQSxFQUMxQiw4QkFBOEI7QUFBQSxFQUM5Qiw0QkFBNEI7QUFBQSxFQUM1Qix3QkFBd0I7QUFBQSxFQUN4Qix3QkFBd0I7QUFBQSxFQUN4QixrQkFBa0I7QUFBQSxFQUNsQix3QkFBd0I7QUFBQSxFQUN4Qix3QkFBd0I7QUFBQSxFQUN4QixrQkFBa0I7QUFBQSxFQUNsQixvQkFBb0I7QUFBQSxFQUNwQixpQkFBaUI7QUFBQSxFQUNqQixpQkFBaUI7QUFBQSxFQUNqQixZQUFZO0FBQUEsRUFDWixlQUFlO0FBQUEsRUFDZixpQkFBaUI7QUFBQSxFQUNqQixPQUFTO0FBQUEsRUFDVCxhQUFhO0FBQUEsRUFDYixrQkFBa0I7QUFBQSxFQUNsQixvQkFBb0I7QUFBQSxFQUNwQixhQUFhO0FBQUEsRUFDYiwyQkFBMkI7QUFBQSxFQUMzQixzQkFBc0I7QUFBQSxFQUN0QixZQUFZO0FBQUEsRUFDWixnQkFBZ0I7QUFBQSxFQUNoQiwyQkFBMkI7QUFBQSxFQUMzQixjQUFjO0FBQUEsRUFDZCxnQkFBZ0I7QUFBQSxFQUNoQixPQUFTO0FBQUEsRUFDVCxlQUFlO0FBQUEsRUFDZixTQUFXO0FBQUEsRUFDWCxvQkFBb0I7QUFBQSxFQUNwQixRQUFVO0FBQ2Q7OztBRHhKSixJQUFNQSxvQkFBbUIsT0FBTyxLQUFLLGdCQUFtQjtBQUN4RCxJQUFNQyxnQkFBZSxPQUFPLEtBQUssWUFBZTtBQUV6QyxJQUFNLFVBQVU7QUFBQSxFQUNuQixPQUFPO0FBQUEsRUFDUCxhQUFhO0FBQUEsRUFDYixvQkFBb0I7QUFBQSxFQUNwQixxQkFBcUI7QUFDekI7QUFFTyxJQUFNLHlCQUF5QixNQUFjO0FBQ2hELE1BQUk7QUFDSixTQUFPO0FBQUEsSUFDSCxNQUFNO0FBQUEsSUFDTixPQUFPLFNBQVMsRUFBRSxTQUFTLFNBQVMsR0FBRztBQUNuQyxnQkFBVTtBQUFBLElBQ2Q7QUFBQSxJQUNBLE1BQU0sS0FBSyxJQUFZO0FBRW5CLFVBQUksWUFBWSxXQUFXLEdBQUcsU0FBUywwQkFBMEIsR0FBRztBQUNoRSxjQUFNLEVBQUUsWUFBWSxJQUFJLE1BQU0sTUFBTTtBQUFBLFVBQ2hDLGVBQWUsUUFBUSxJQUFJO0FBQUEsVUFDM0IsYUFBYSxDQUFDLEVBQUU7QUFBQSxVQUNoQixRQUFRO0FBQUEsVUFDUixPQUFPO0FBQUEsVUFDUCxVQUFVO0FBQUEsVUFDVixLQUFLO0FBQUEsVUFDTCxRQUFRO0FBQUEsVUFDUixTQUFTO0FBQUEsWUFDTDtBQUFBLGNBQ0ksTUFBTTtBQUFBLGNBQ04sTUFBTUMsUUFBTztBQUNULGdCQUFBQSxPQUFNLFVBQVUsRUFBRSxXQUFXLFFBQVEsUUFBUSxLQUFLLEdBQUcsQ0FBQyxTQUFTO0FBQzNELHNCQUFJLEtBQUssU0FBUyxlQUFlO0FBQzdCLDJCQUFPO0FBQUEsa0JBQ1g7QUFHQSxzQkFBSSxLQUFLLEtBQUssV0FBVyxRQUFRLEdBQUc7QUFDaEMsMkJBQU87QUFBQSxrQkFDWDtBQUdBLHlCQUFPO0FBQUEsb0JBQ0gsTUFBTSxLQUFLO0FBQUEsb0JBQ1gsVUFBVTtBQUFBLGtCQUNkO0FBQUEsZ0JBQ0osQ0FBQztBQUFBLGNBQ0w7QUFBQSxZQUNKO0FBQUEsVUFDSjtBQUFBLFFBQ0osQ0FBQztBQUVELFlBQUksQ0FBQyxlQUFlLFlBQVksV0FBVyxHQUFHO0FBQzFDLGlCQUFPO0FBQUEsUUFDWDtBQUVBLGVBQU8sWUFBWSxDQUFDLEVBQUU7QUFBQSxNQUMxQjtBQUNBLGFBQU87QUFBQSxJQUNYO0FBQUEsRUFDSjtBQUNKO0FBRUEsSUFBTyxzQkFBUSxhQUFhO0FBQUE7QUFBQSxFQUV4QixRQUFRO0FBQUEsSUFDSixpQ0FBaUMsS0FBSyxVQUFVLFFBQVEsSUFBSSxpQkFBaUI7QUFBQSxJQUM3RSx1QkFBdUIsS0FBSyxVQUFVLFFBQVEsSUFBSSxPQUFPO0FBQUEsRUFDN0Q7QUFBQSxFQUNBLFNBQVMsQ0FBQyxNQUFNLEdBQUcsY0FBYyxHQUFHLElBQUksRUFBRSxrQkFBa0IsTUFBTSxhQUFhLEtBQUssQ0FBQyxHQUFHLHVCQUF1QixDQUFDO0FBQUEsRUFDaEgsT0FBTztBQUFBLElBQ0gsS0FBSztBQUFBLE1BQ0QsT0FBTztBQUFBLE1BQ1AsVUFBVSxDQUFDLFdBQW1CLFVBQVUsTUFBTTtBQUFBLElBQ2xEO0FBQUEsSUFDQSxXQUFXO0FBQUEsSUFDWCxRQUFRO0FBQUEsSUFDUixlQUFlO0FBQUEsTUFDWCxVQUFVLENBQUMsR0FBR0QsZUFBYyxHQUFHRCxtQkFBa0Isb0JBQW9CLG1CQUFtQjtBQUFBLE1BQ3hGLFFBQVE7QUFBQSxRQUNKO0FBQUEsVUFDSSxNQUFNO0FBQUEsVUFDTixRQUFRO0FBQUEsVUFDUixpQkFBaUI7QUFBQSxVQUNqQixxQkFBcUI7QUFBQSxVQUNyQjtBQUFBLFFBQ0o7QUFBQSxRQUNBO0FBQUEsVUFDSSxNQUFNO0FBQUEsVUFDTixRQUFRO0FBQUEsVUFDUjtBQUFBLFFBQ0o7QUFBQSxRQUNBO0FBQUEsVUFDSSxNQUFNO0FBQUEsVUFDTixRQUFRO0FBQUEsVUFDUjtBQUFBLFFBQ0o7QUFBQSxNQUNKO0FBQUEsSUFDSjtBQUFBLEVBQ0o7QUFDSixDQUFDOyIsCiAgIm5hbWVzIjogWyJwZWVyRGVwZW5kZW5jaWVzIiwgImRlcGVuZGVuY2llcyIsICJidWlsZCJdCn0K
