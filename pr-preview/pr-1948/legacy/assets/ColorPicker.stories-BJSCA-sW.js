import{j as f}from"./jsx-runtime-BYYWji4R.js";import{r as n}from"./index-ClcD9ViR.js";import{C as y}from"./colors-cqDZVL9s.js";import{C as F,E as g}from"./example-palettes-CfB2dHWa.js";import"./_commonjsHelpers-Cpj98o6Y.js";import"./SegmentedControls-r3r2f3_F.js";import"./useFocusRing-B9BQthcQ.js";import"./useEffectEvent-23OTMzEQ.js";import"./useFocusable-CZi8_B22.js";import"./chain-B69fAeb4.js";import"./useFormValidationState-DEApGEAd.js";import"./FocusScope-w2zxYk15.js";import"./useField-C-MGrtKJ.js";import"./useLabels-B6kz3a6s.js";import"./context-nOjF3i7Y.js";import"./VisuallyHidden-D_nuEezd.js";import"./useControlledState-CbyHarIm.js";import"./useMemoizedId-DU5NJZZj.js";import"./focusStyle-CBFElZiz.js";import"./merge-DI-veSMP.js";import"./motion-DqKuqH19.js";import"./TextInput-DlGYTQhf.js";import"./LoadingCircle-N4gckcbl.js";import"./IconCheckMark-DDrIoLdu.js";import"./IconSize-BcCrF_mi.js";import"./IconCross-BVasaH61.js";import"./IconExclamationMarkTriangle-DOh84ahI.js";import"./IconExclamationMarkTriangle24-BCoex7hw.js";import"./validation-CJXPAjNB.js";import"./LegacyTooltip-DZi8o8cC.js";import"./useLink-BjF4lkum.js";import"./usePopper-6IkYpIP_.js";import"./index-BrlJLjep.js";import"./index-DlnOb27V.js";import"./Button-Dq_bWxV2.js";import"./useButton-DEkuJNpl.js";import"./Portal-CFnKnrEz.js";import"./IconExclamationMarkCircle24-4UiwpX0o.js";import"./IconMagnifier-r2kj5vef.js";import"./IconMagnifier16-Axw5V6CX.js";import"./Dropdown-egl1_ook.js";import"./useOverlayTriggerState-BqqtXolg.js";import"./useMenuTrigger-CTdeBS2Q.js";import"./useLocalizedStringFormatter-CtFTyIY5.js";import"./helper-BomHdNzC.js";import"./isScrollable-BSEN4xi5.js";import"./SelectionManager-35gLbgrT.js";import"./MenuItem-DHnoWSqN.js";import"./IconCaretRight-CAeLeSzU.js";import"./elements-BOYmskOL.js";import"./Trigger-D9bzlWWl.js";import"./IconCaretDown-BLgqrlDL.js";import"./IconCaretDown16-Df8Xsbqc.js";import"./IconTrashBin16-DOiZQ5Am.js";import"./IconTrashBin24-10Yg3nt7.js";import"./EnablePortalWrapper-NFMuvtML.js";const _r={title:"Components/Color Picker",component:F,tags:["autodocs"],args:{currentColor:{red:85,green:102,blue:255}},argTypes:{onSelect:{action:"Select Color"}},parameters:{status:{type:"deprecated"},docs:{description:{component:"### This component is deprecated, please use the [new Color Picker component](/docs/current_components-colorpicker--documentation) instead."}}}},s=e=>{const[x,P]=n.useState(e.currentColor),[k,E]=n.useState(y.Hex);return f.jsx(F,{...e,currentColor:x,currentFormat:k,setFormat:E,onSelect:m=>{e.onSelect(m),P(m)}})},t=s.bind({}),r=s.bind({});r.args={palettes:g,allowCustomColor:!1};const o=s.bind({});o.args={palettes:g};var c,a,l;t.parameters={...t.parameters,docs:{...(c=t.parameters)==null?void 0:c.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(l=(a=t.parameters)==null?void 0:a.docs)==null?void 0:l.source}}};var p,i,u;r.parameters={...r.parameters,docs:{...(p=r.parameters)==null?void 0:p.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(u=(i=r.parameters)==null?void 0:i.docs)==null?void 0:u.source}}};var C,d,S;o.parameters={...o.parameters,docs:{...(C=o.parameters)==null?void 0:C.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(S=(d=o.parameters)==null?void 0:d.docs)==null?void 0:S.source}}};const br=["OnlyCustomColor","OnlyBrandColor","WithBrandColors"];export{r as OnlyBrandColor,t as OnlyCustomColor,o as WithBrandColors,br as __namedExportsOrder,_r as default};
