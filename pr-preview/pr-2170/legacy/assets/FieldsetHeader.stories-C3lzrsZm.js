import{j as s}from"./jsx-runtime-Nms4Y4qS.js";import{r as a}from"./index-BwDkhjyp.js";import{I as l}from"./IconIcon-Dc2EWjpR.js";import{F as m,a as r,b as p}from"./FieldsetHeader-DkbuJqve.js";import"./_commonjsHelpers-BosuxZz1.js";import"./IconSize-BcCrF_mi.js";import"./IconIcon16-DWj0uaJO.js";import"./IconIcon24-B3RK_NZS.js";import"./Switch-atUUSKtW.js";import"./useFocusRing-Vzyl7-Lk.js";import"./SSRProvider-CYXx33DY.js";import"./InputLabel-XVdppRg-.js";import"./TooltipIcon-Ki09kA5t.js";import"./LegacyTooltip-DmnzjIEq.js";import"./useLink-BrkukSAv.js";import"./useFocusable-ClqOF1PM.js";import"./chain-CSFqNvhK.js";import"./usePopper-C28Vz6Qz.js";import"./index-CS4BWtGh.js";import"./index-CfyPTyT-.js";import"./Button-wjaYzy_L.js";import"./useButton-B0CVDvll.js";import"./focusStyle-CBFElZiz.js";import"./merge-DI-veSMP.js";import"./Portal-BBACcjoK.js";import"./useMemoizedId-EtHZ7Sxa.js";import"./IconCheckMark-CuwFbSck.js";import"./IconExclamationMarkCircle24-Vs83y98-.js";import"./IconExclamationMarkTriangle-DSMv5KKP.js";import"./IconExclamationMarkTriangle24-NdDZZD89.js";import"./IconQuestionMarkCircle-Buo6J1lY.js";import"./IconCaretDown-DH0KSiPA.js";import"./IconCaretDown16-mzuMIk3a.js";import"./IconMinus-Dg4Ytceu.js";import"./IconPlus-DIwL1LaZ.js";import"./IconPlus16-BeDPBK1Q.js";const U={title:"Deprecated/Fieldset Header",component:m,tags:["autodocs"],argTypes:{size:{options:[r.Small,r.Medium,r.Large],control:{type:"radio"}},type:{options:Object.values(p),control:{type:"radio"}}},args:{size:r.Large,active:!0,type:p.Default,disabled:!1,bold:!0,children:"Heading",decorator:!0}},t=e=>{const[i,o]=a.useState(e.active);return a.useEffect(()=>{o(e.active)},[e.active]),s.jsx(m,{...e,decorator:e.decorator&&s.jsx(l,{}),active:i,onClick:()=>o(!i)})};t.__docgenInfo={description:"",methods:[],displayName:"FieldsetHeader",props:{size:{required:!1,tsType:{name:"FieldsetHeaderSize"},description:""},active:{required:!1,tsType:{name:"boolean"},description:""},decorator:{required:!1,tsType:{name:"ReactNode"},description:""},type:{required:!1,tsType:{name:"FieldsetHeaderType"},description:""},disabled:{required:!1,tsType:{name:"boolean"},description:""},bold:{required:!1,tsType:{name:"boolean"},description:""},children:{required:!0,tsType:{name:"string"},description:""},onClick:{required:!1,tsType:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}}},description:""},as:{required:!1,tsType:{name:"JSX.IntrinsicElements"},description:""},tabIndex:{required:!1,tsType:{name:"number"},description:""},"data-test-id":{required:!1,tsType:{name:"string"},description:""}}};var d,n,c;t.parameters={...t.parameters,docs:{...(d=t.parameters)==null?void 0:d.docs,source:{originalSource:`(args: FieldsetHeaderProps) => {
  const [active, setActive] = useState(args.active);
  useEffect(() => {
    setActive(args.active);
  }, [args.active]);
  return <FieldsetHeaderComponent {...args} decorator={args.decorator && <IconIcon />} active={active} onClick={() => setActive(!active)} />;
}`,...(c=(n=t.parameters)==null?void 0:n.docs)==null?void 0:c.source}}};const V=["FieldsetHeader"];export{t as FieldsetHeader,V as __namedExportsOrder,U as default};
